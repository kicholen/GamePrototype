//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public SnapPositionComponent snapPosition { get { return (SnapPositionComponent)GetComponent(ComponentIds.SnapPosition); } }

        public bool hasSnapPosition { get { return HasComponent(ComponentIds.SnapPosition); } }

        public Entity AddSnapPosition(float newX, float newY, float newWidth, float newHeight, bool newShouldSnapToCameraY) {
            var component = CreateComponent<SnapPositionComponent>(ComponentIds.SnapPosition);
            component.x = newX;
            component.y = newY;
            component.width = newWidth;
            component.height = newHeight;
            component.shouldSnapToCameraY = newShouldSnapToCameraY;
            return AddComponent(ComponentIds.SnapPosition, component);
        }

        public Entity ReplaceSnapPosition(float newX, float newY, float newWidth, float newHeight, bool newShouldSnapToCameraY) {
            var component = CreateComponent<SnapPositionComponent>(ComponentIds.SnapPosition);
            component.x = newX;
            component.y = newY;
            component.width = newWidth;
            component.height = newHeight;
            component.shouldSnapToCameraY = newShouldSnapToCameraY;
            ReplaceComponent(ComponentIds.SnapPosition, component);
            return this;
        }

        public Entity RemoveSnapPosition() {
            return RemoveComponent(ComponentIds.SnapPosition);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherSnapPosition;

        public static IMatcher SnapPosition {
            get {
                if (_matcherSnapPosition == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.SnapPosition);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherSnapPosition = matcher;
                }

                return _matcherSnapPosition;
            }
        }
    }
}
