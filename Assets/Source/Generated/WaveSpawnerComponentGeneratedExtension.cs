//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public WaveSpawnerComponent waveSpawner { get { return (WaveSpawnerComponent)GetComponent(ComponentIds.WaveSpawner); } }

        public bool hasWaveSpawner { get { return HasComponent(ComponentIds.WaveSpawner); } }

        public Entity AddWaveSpawner(int newCount, int newType, float newTimeOffset, float newTime, float newSpeed, int newHealth, int newPath, int newGrid, int newDamage) {
            var component = CreateComponent<WaveSpawnerComponent>(ComponentIds.WaveSpawner);
            component.count = newCount;
            component.type = newType;
            component.timeOffset = newTimeOffset;
            component.time = newTime;
            component.speed = newSpeed;
            component.health = newHealth;
            component.path = newPath;
            component.grid = newGrid;
            component.damage = newDamage;
            return AddComponent(ComponentIds.WaveSpawner, component);
        }

        public Entity ReplaceWaveSpawner(int newCount, int newType, float newTimeOffset, float newTime, float newSpeed, int newHealth, int newPath, int newGrid, int newDamage) {
            var component = CreateComponent<WaveSpawnerComponent>(ComponentIds.WaveSpawner);
            component.count = newCount;
            component.type = newType;
            component.timeOffset = newTimeOffset;
            component.time = newTime;
            component.speed = newSpeed;
            component.health = newHealth;
            component.path = newPath;
            component.grid = newGrid;
            component.damage = newDamage;
            ReplaceComponent(ComponentIds.WaveSpawner, component);
            return this;
        }

        public Entity RemoveWaveSpawner() {
            return RemoveComponent(ComponentIds.WaveSpawner);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherWaveSpawner;

        public static IMatcher WaveSpawner {
            get {
                if (_matcherWaveSpawner == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.WaveSpawner);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherWaveSpawner = matcher;
                }

                return _matcherWaveSpawner;
            }
        }
    }
}
